x-kong-config:
  &kong-env
  # KONG_DATABASE: ${KONG_DATABASE:-off}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: postgres
  KONG_PG_USER: ${POSTGRES_USERNAME:-postgres}
  KONG_PG_PASSWORD: ${POSTGRES_PASSWORD:-postgres}

services:
  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U ${POSTGRES_USERNAME:-postgres}' ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./configs/postgres/init:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:4-management-alpine
    restart: unless-stopped
    ports:
      - ${RABBITMQ_PORT:-5672}:5672
      - ${RABBITMQ_MANAGEMENT_PORT:-15672}:15672
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/

  keycloak:
    build:
      context: .
      dockerfile: configs/keycloak/Dockerfile
    restart: unless-stopped
    ports:
      - ${KEYCLOAK_PORT:-5555}:${KEYCLOAK_PORT:-5555}
    environment:
      # https://www.keycloak.org/server/all-config
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USERNAME:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_DB: postgres
      KC_DB_USERNAME: ${POSTGRES_USERNAME:-postgres}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      KC_DB_URL_HOST: postgres
      KC_DB_URL_PORT: ${POSTGRES_PORT:-5432}
      KC_DB_URL_DATABASE: keycloak
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_HTTP_RELATIVE_PATH: /
      KC_HTTP_PORT: ${KEYCLOAK_PORT:-5555}
      # Provider: https://github.com/aznamier/keycloak-event-listener-rabbitmq
      KK_TO_RMQ_URL: rabbitmq
      KK_TO_RMQ_PORT: ${RABBITMQ_PORT:-5672}
      KK_TO_RMQ_VHOST: /
      KK_TO_RMQ_EXCHANGE: ${KEYCLOAK_RABBITMQ_EXCHANGE:-keycloak.topic}
      KK_TO_RMQ_USERNAME: guest
      KK_TO_RMQ_PASSWORD: guest
    command: start-dev --import-realm
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./configs/keycloak/import:/opt/keycloak/data/import
      - ./configs/keycloak/providers:/opt/keycloak/providers

  kong-migrations:
    image: kong:3.9.0
    command: kong migrations bootstrap
    depends_on:
      - postgres
    environment:
      <<: *kong-env
    restart: on-failure

  kong-migrations-up:
    image: kong:3.9.0
    command: kong migrations up && kong migrations finish
    depends_on:
      - postgres
    environment:
      <<: *kong-env
    restart: on-failure

  kong:
    image: kong:3.9.0
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
      KONG_ADMIN_GUI_PATH: "/manager"
      KONG_ADMIN_GUI_URL: "http://localhost:8002/manager"
    # extra_hosts:
    #   - 'host.docker.internal:host-gateway'
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "8001:8001/tcp"
      - "8444:8444/tcp"
      - "8002:8002/tcp"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./configs/kong:/opt/kong
    security_opt:
      - no-new-privileges

volumes:
  postgres_data:
  rabbitmq_data:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
